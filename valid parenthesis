Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.


code
class Solution {
    public static boolean isValid(String s)
     {
        if(s.length()%2!=0)
        {
            return false;
    
        }
        Map<Character,Character> Bracketmap= new HashMap<>();
        Bracketmap.put(')','(');
        Bracketmap.put(']','[');
        Bracketmap.put('}','{');
        Stack<Character> stack= new Stack<>();
        for(char ch: s.toCharArray())
        {
        
             if (ch == '(' || ch == '[' || ch == '{') 
             {
                stack.push(ch);
            } 
            else if (ch == ')' || ch == ']' || ch == '}') 
            {
                if (stack.isEmpty() || stack.peek() != Bracketmap.get(ch)) {
                    return false;
                }
                stack.pop();
            }
        }
        
        return stack.isEmpty();
    }

    public static void main(String[] args) {
    
        System.out.println(isValid("()"));         
        System.out.println(isValid("()[]{}"));    
        System.out.println(isValid("(]"));         
        System.out.println(isValid("([)]"));       
        System.out.println(isValid("{[]}"));
